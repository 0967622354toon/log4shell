Detection Regex (not product specific):
\${(\${(.*?:|.*?:.*?:-)('|"|`)*(?1)}*|[jndi:lapsrm]('|"|`)*}*){9,11}

F5 created an Irule for detection: https://support.f5.com/csp/article/K19026212
Akamai cloud:                           Internet Facing Applications ' sudo egrep -i -r "\$\{jndi:(ldap[s]?|rmi|dns)://' /var/log"
Google Cloud Platform:                  https://cloud.google.com/blog/products/identity-security/cloud-armor-waf-rule-to-help-address-apache-log4j-vulnerability
Palo Alto Prisma Cloud:                 https://unit42.paloaltonetworks.com/apache-log4j-vulnerability-cve-2021-44228/
Palo Alto Firewall:                     Threat ID 91991 ingested after content update 8498
Microsoft Defender and Sentinel rules:  https://www.microsoft.com/security/blog/2021/12/11/guidance-for-preventing-detecting-and-hunting-for-cve-2021-44228-log4j-2-exploitation/
Trend Micro Cloud One:                  LI Rule 1011241
Tanium:                                 https://community.tanium.com/s/article/How-Tanium-Can-Help-with-CVE-2021-44228-Log4Shell

Snort and Suricata rules:
These are ET Open free community detections to alert on current exploit activity.  SID range 2034647-2034652.  https://rules.emergingthreatspro.com/open/

Client related Detection:
Florian Roth Grep and YARA rule for log4j2 exploitation:   https://gist.github.com/Neo23x0/e4c8b03ff8cdf1fa63b7d15db6e3860b
Powershell script to detect Log4Shell on a client:         https://github.com/sp4ir/incidentresponse/blob/35a2faae8512884bcd753f0de3fa1adc6ec326ed/Get-Log4shellVuln.ps1
